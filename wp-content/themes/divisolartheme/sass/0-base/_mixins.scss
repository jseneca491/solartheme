// Utility for prefixing mixins 
@mixin prefixer($property, $value, $prefixes: webkit moz) {
    $valid: false;
    @if type-of($property) == "string" {
      $valid: true;
    }
    @if type-of($prefixes) == "list" {
      $valid: true;
    }
    @if type-of($prefixes) == "string" {
      $valid: true;
    }
    @if $valid == true {
      @each $prefix in $prefixes {
        #{"-" + $prefix + "-" + $property}: $value;
      }
      #{$property}: $value;
    } @else {
      @warn "Invalid arguments supplied";
    }
  }
  
  // Renders fully prefixed box-sizing
  @mixin box-sizing($box: border-box) {
    $valid: true;
    @if type-of($box) != "string" {
      @warn "box: #{$box} is not a string";
      $valid: false;
    }
    @if $valid == true {
      @include prefixer(box-sizing, $box, webkit moz);
    }
  }
  
  // Renders fully prefixed transform
  @mixin transform($property: none) {
    $valid: false;
    @if type-of($property) == "string" {
      $valid: true;
    }
    @if type-of($property) == "list" {
      $valid: true;
    }
    @if $valid == true {
      @include prefixer(transform, $property, webkit moz ms);
    } @else {
      @warn "property: #{$property} is not a valid argument";
    }
  }
  
  // Renders fully prefixed transistion
  @mixin transition($property: 0.15s) {
    $valid: false;
    @if type-of($property) == "string" {
      $valid: true;
    }
    @if type-of($property) == "list" {
      $valid: true;
    }
    @if type-of($property) == "number" {
      $valid: true;
    }
    @if $valid == true {
      @include prefixer(transition, $property, webkit moz ms);
    } @else {
      @warn "property: #{$property} is not a valid argument";
    }
  }
  
  // Renders fully prefixed border radius
  @mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;
  }
  @mixin border-top-radius($radius) {
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
  }
  @mixin border-right-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    background-clip: padding-box;
  }
  @mixin border-bottom-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    background-clip: padding-box;
  }
  @mixin border-left-radius($radius) {
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
  }
  
  // Removes all styles from an ordered/unordered list
  @mixin reset-list-styles($float) {
    list-style-type: none;
    padding: 0;
    margin: 0;
    li {
      float: $float;
    }
  }
  
  @mixin flex() {
    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
  }
  
  // Placeholder
  @mixin placeholder {
    ::-webkit-input-placeholder {@content}
    :-moz-placeholder           {@content}
    ::-moz-placeholder          {@content}
    :-ms-input-placeholder      {@content}  
  }
  
// Clearfix
@mixin clearfix() {
    &:before,
    &:after {
      content: "";
      display: table;
    }
    &:after {
      clear: both;
    }
}
  
  // Cross Browser opacity
  @mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
  }


// PX TO REM
// usage: @include font-size(20px);
@function get-value($n) {
   @return $n / ($n * 0 + 1);
}

@mixin font-size($font-size) {
   $base-size: get-value($base / 100);
   $base-px-size: 16 * $base-size;

   //font-size: $font-size;
   font-size: (get-value($font-size) / $base-px-size) + rem;
}

@function rem($size) {
  @return math.div($size, 16px) * 1rem;
}

// Media Quaries
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}


@mixin respond-to-max($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (max-width: map-get($breakpoints, $breakpoint)-1) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin respond-between($from, $to){

  @media (min-width: map-get($breakpoints, $from)) and ( max-width: map-get($breakpoints, $to) ) {
    @content;
  }

}

// Width and Height
@mixin wh($width, $height) {
  width: $width;
  height: $height;
}

// Position
@mixin position($position, $top, $left, $bottom, $right) {
  position: $position;
  top: $top;
  left: $left;
  bottom: $bottom;
  right: $right;
}